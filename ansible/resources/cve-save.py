#!/bin/env python2
import io
import re
import feedparser
import ConfigParser

import redis

import mysql.connector
from decimal import Decimal
from datetime import datetime, date, timedelta

SETTINGS = {}
CVEDB = None
CURSOR = None
CACHE = None

def read_settings():
    path = '/root/config.ini'
    with open(path) as file:
        fdata = file.read()

    settings = {}
    config = ConfigParser.RawConfigParser(allow_no_value=True)
    config.readfp(io.BytesIO(fdata))
    print("File: %s" % path)
    for sect in config.sections():
        print(": %s" % sect)
        settings[sect] = {}
        for opt in config.options(sect):
            val = config.get(sect, opt)
            settings[sect][opt] = val	
            print("  - %s = %s" % (opt, val))
    return settings

def cacheconnect():
    cachesett = SETTINGS['cache']
    host = cachesett['host']
    port = cachesett['port']
    r = redis.Redis(host=host, port=port)
    return r

def dbconnect():
    sqlsett = SETTINGS['mysql']
    socket = sqlsett['socket']
    user = sqlsett['user']
    passwd = sqlsett['password']
    db  = 'cves_dev'
    sqlcon = mysql.connector.connect(unix_socket=socket, user=user, password=passwd, database=db)
    return sqlcon

def query_db_cve(cve):
    retVal = None
    print("Query: %s" % cve)
    cached = False
    if CACHE is not None:
        retVal = CACHE.get('usn:%s' % cve) 
        if retVal is not None:
            return retVal
    query = 'SELECT * FROM usn WHERE cves LIKE "%%%s%%"' % cve
    CURSOR.execute(query)
    retVal = CURSOR.fetchall()
    CACHE.set('usn:%s'.format(cve), retVal)
    return retVal

def query_usn_cve(cve):
    retval = None
    print("Query: %s" % cve)
    url = 'https://usn.ubuntu.com/usn/rss.xml'
    print("Parsing USN Feed: %s" % url)
    d = feedparser.parse(url)
    for e in d.entries:
        usn = format_usn(e)
        save_usn(usn)
        if e.summary.find(cve) > -1:
            print("Found It!")
            retval = e
    if type(retval) is None:
        print('%s not found' % cve)
    return retval

def format_usn(usn):
    pdate = usn.published_parsed
    p = "%s-%s-%s" % (pdate[0], pdate[1], pdate[2]) # tm_year, tm_mon, tm_mday == YYYY-M-D
    t = usn.title
    u = t[:t.find(":")]
    summ = usn.summary
    refs = summ[summ.find('<h2 id="references">References</h2>'):]
    regexp = re.compile('(CVE(?:-\d+){2,})')
    match = regexp.findall(refs)
    cves = ','.join(match)
    notice = {
        "id":0,
        "usnid":u,
        "title":t,
        "link":usn.link,
        "published":p,
        "summary":usn.summary,
        "cves":cves
    }
    return notice

def save_usn(usn):
    query = 'INSERT INTO usn VALUES("%s", "%s", "%s", "%s", "%s", \'%s\', "%s")'
    data = (usn['id'], usn['usnid'], usn['title'], usn['link'], usn['published'], usn['summary'], usn['cves'])
    CURSOR.execute(query % data)
    CVEDB.commit()

SETTINGS = read_settings()
print("\nSETTINGS:")
print(SETTINGS)
print("")

CACHE = cacheconnect()
print(CACHE)
CVEDB = dbconnect()
print(CVEDB)
CURSOR = CVEDB.cursor()
print(CURSOR)
print("")

CURSOR.execute('CREATE TABLE IF NOT EXISTS usn (id INT NOT NULL AUTO_INCREMENT, usnid VARCHAR(16), title TINYTEXT, link VARCHAR(32), published DATE, summary LONGTEXT, cves TEXT, PRIMARY KEY (id))')
CVEDB.commit()

CVES = ('CVE-2017-0861',) # Chosen for first page RSS presence
usn = query_db_cve(CVES[0])
if len(usn) > 0:
    for e in usn:
        print e
    quit()

usn = query_usn_cve(CVES[0])
print(usn)
print("")

notice = format_usn(usn)

#
#cursor.execute('INSERT INTO usn VALUES("%s", "%s", "%s", "%s", "%s", \'%s\', "%s")' % (notice['id'], notice['usnid'], notice['title'], notice['link'], notice['published'], notice['summary'], notice['cves']))
#
#cvedb.commit()
#
#CURSOR.execute('SELECT * FROM usn')
#for x in CURSOR.fetchall():
#    print(x)
