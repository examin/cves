#!/bin/bash
#set -x
# rebuild
#
# Reload (re-image) the server
# ./bin/rebuild [server UUID]
#
# NOTE: Relies upon rack-cli being installed & configured
#	https://developer.rackspace.com/docs/rack-cli/
#
# TODO: [ '!': 'Critical', '-': 'Moderate' ]
#	! Better argument handling
#		http://linuxcommand.org/lc3_wss0120.php
#	- Verbosity flag
#	- Remove dependency on default rack-cli environment
#	- Support rack-cli environment name
V=1

print_usage() {
cat <<- _EOF_
Usage: `basename $0` [[-u | --uuid UUID] | [-n | --name NAME]] [-i | --image IMAGE] [-a | --admin-pass PASS]
Rebuild server for environment refresh.

With no arguments, print usage.

  UUID      cloud server UUID
  NAME      cloud server name
  IMAGE     image ID to rebuild server with
  PASS      admin password

NOTE: Requires default rack-cli environment setup with appropriate permissions.
WARNING! Will destroy your server!
_EOF_
exit 1
}

query_user() {
	PROMPT=$1
	shift
	if [[ -z "$PROMPT" ]]; then echo "Invalid query_user() Argument: $PROMPT"; exit 1; fi
	read -p "$PROMPT" var
	var=`echo ${var:0:1}|awk '{print toupper($0)}'`
	RETVAL=1
	if [[ "$var" == "Y" ]]; then RETVAL=0; fi
	return $RETVAL
}

if [[ $# -eq 0 ]]; then print_usage; fi

echo -e 'WARNING! This is under development and WILL destroy your server!\nDO NOT TREAD LIGHTLY!\n'

UUID=""
IMAGE=""
NAME=""
PASS=""

while [[ "$1" != "" ]]; do
    flag=$1 && shift
    case "$flag" in
        '-u' | '--uuid')
            UUID=$1 && shift 
            ;;
        '-n' | '--name')
            NAME=$1 && shift
            ;;
        '-i' | '--image')
            IMAGE="$1" && shift
            ;;
        '-a' | '--admin-pass')
            PASS="$1" && shift
            ;;
        *)
            echo "Unknown Argument! $1" && shift
            print_usage
            ;;
    esac
done

if [[ -z "$UUID" && -z "$NAME" ]]; then
   echo -e "No UUID or NAME provided! Please provide UUID or NAME for server in question."
   print_usage
elif [[ -z "$IMAGE" ]]; then
   echo -e "No Image ID provided! Please provide UUID of image for rebuild."
   print_usage
elif [[ -z "$PASS" ]]; then
   echo -e "No Admin Password provided! Please provide an admin password."
   print_usage
fi

which rack &>/dev/null
RC=$?
if [[ $RC -ne 0 ]]; then
   echo -e "rack-cli not installed.\n\thttps://developer.rackspace.com/docs/rack-cli/"
   exit 1
fi

RACKCLI=`which rack`
[[ $V -gt 0 ]] && $RACKCLI version

CMD=""
if [[ ! -z "$UUID" ]]; then
    CMD="$RACKCLI servers instance get --id $UUID"
elif [[ ! -z "$NAME" ]]; then
    CMD="$RACKCLI servers instance get --name $NAME"
else
    echo -e "No UUID or NAME provided to identify server."
    exit 1
fi
[[ $V -gt 0 ]] && echo -e "Safety check...\nEXECUTING: $CMD | grep -E \"^Name\s+\S*cvesearch\s*\$\""
$CMD | grep -E "^Name\s+\S*cvesearch\s*$"
RC=$?
if [[ $RC != 0 ]]; then
   echo "This does not appear to be a cvesearch server. Are you sure you have the right Name or UUID?"
   exit 1
fi

[[ $V -gt 0 ]] && echo "EXECUTING: $CMD"
echo -e "\nSERVER DETAILS:"
SERVER=`$CMD`
echo "$SERVER"
UUID=`echo $SERVER|awk '/^ID/ {print $2}'`
echo UUID: $UUID
CMD=""

query_user "Create new server image? (y/N) "
RC=$?
if [[ $RC -eq 0 ]]; then
   name=""
   while [[ -z "$name" ]]; do
     read -p "Image Name? " name
   done
   if [[ ! -z "$($RACKCLI servers image get --name $name)" ]]; then
        echo DUPLICATE IMAGE NAME: $name
        exit 1
   fi
   CMD="$RACKCLI servers image create --name $name --server-id $UUID"
   [[ $V -gt 0 ]] && echo "EXECUTING: $CMD"
   $CMD
   RC=$?
   if [[ $RC -ne 0 ]]; then
      echo -e "ERROR! Issue with image creation.\nCMD: $CMD\nRC: $RC"
      exit 1
   fi

   query_user "Watch the image? (^C to exit) (y/N) "
   RC=$?
   if [[ $RC -eq 0 ]]; then
      CMD="`which watch` -n3 $RACKCLI servers image get --name $name"
      [[ $V -gt 0 ]] && echo "EXECUTING: $CMD"
      $CMD
   fi

   CMD="$RACKCLI servers image get --name $name"
   [[ $V -gt 0 ]] && echo -e "Waiting for image to finish...\nEXECUTING: $CMD"

   STATUS="SAVING"
   while [[ $STATUS != "ACTIVE" ]]; do
      STATUS="`$CMD|awk '$1 ~ /^Status$/ {print $2}'`"
   done
fi

query_user "Proceed with server rebuild? (y/N) "
RC=$?
if [[ $RC -ne 0 ]]; then exit 0; fi

CMD="$RACKCLI servers instance rebuild --id $UUID --image-id $IMAGE"
if [[ ! -z "$PASS" ]]; then
   CMD="$CMD --admin-pass $PASS"
fi

[[ $V -gt 0 ]] && echo "EXECUTING: $CMD"
$CMD
RC=$?
if [[ $RC -ne 0 ]]; then
   echo -e "ERROR! Issue with rebuild.\nCMD: $CMD\nRC: $RC"
   exit 1
fi
CMD=""

query_user "Watch the rebuild? (^C to quit) (y/N) "
RC=$?
if [[ $RC -ne 0 ]]; then exit 0; fi

CMD="`which watch` -n3 $RACKCLI servers instance get --id $UUID"
[[ $V -gt 0 ]] && echo "EXECUTING: $CMD"
$CMD
CMD=""
